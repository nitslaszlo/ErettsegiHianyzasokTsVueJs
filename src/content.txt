import * as http from "http";
import * as url from "url";
import * as fs from "fs";
import { Hiányzó } from "./hianyzo";

export class Content {

    // 4. feladat:
    

    Content(req: http.ServerRequest, res: http.ServerResponse): void {
        res.writeHead(200, { "Content-Type": "text/html; charset=utf-8" });
        res.write("<pre style='font-family: Courier'>");
        res.write("<form style='font-size:16px; background: LightGray'>");
        res.write("<p>1. feladat:<br>Az adatok beolvasása</p>");

        const hiányzók: Hiányzó[] = [];
        let aktDátum: string;
        fs.readFileSync("naplo.txt").toString().split("\n").forEach(i => {
            const aktSor: string = i.trim();
            if (aktSor[0] === "#") aktDátum = aktSor;
            else if (aktSor.length > 0) hiányzók.push(new Hiányzó(aktDátum, aktSor));
        });

        res.write(`<p>2. feladat:<br>A naplóban ${hiányzók.length} bejegyzés van.</p>`);

        // 3. feladat:
        let összIgazolt: number = 0;
        let összIgazolatlan: number = 0;
        hiányzók.forEach(i => {
            összIgazolt += i.IgazoltDb;
            összIgazolatlan += i.IgazolatlanDb;
        });
        res.write("<p>3. feladat:<br>" +
            `Az igazolt hiányzások száma ${összIgazolt}, az igazolatlanoké ${összIgazolatlan} óra.</p>`);

        // Felhasználói input az 5. és 6. feladatokhoz
        const query: any = url.parse(req.url, true).query;
        const honap: string = query.honap === undefined ? "2" : query.honap;
        const nap: string = query.nap === undefined ? "3" : query.nap;
        const napnev: string = query.napnev === undefined ? "szerda" : query.napnev;
        const ora: string = query.ora === undefined ? "3" : query.ora;

        res.write("<p>5.feladat:<br>A hónap sorszáma = <input type='text' " +
            "name= 'honap' style= 'font-family:Courier; background:LightGray;' " +
            `value='${honap}'><br>`);
        res.write("A nap sorszáma = <input type='text' " +
            "name= 'nap' style= 'font-family:Courier; background:LightGray;' " +
            `value='${nap}'><p>`);
        res.write(`<p>Azon a napon ${Content.HetNapja(parseInt(honap), parseInt(nap))} volt.</p>`);

        res.write("<p>6.feladat:<br>A nap neve = <input type='text' " +
            "name= 'napnev' style= 'font-family:Courier; background:LightGray;' " +
            `value='${napnev}'><br>`);
        res.write("Az óra sorszáma = <input type='text' " +
            "name= 'ora' style= 'font-family:Courier; background:LightGray;' " +
            `value='${ora}'><p>`);
        let hiányzásokDb: number = 0;
        hiányzók.forEach(i => {
            hiányzásokDb += i.MegszámolHiányzás(napnev, parseInt(ora));
        });
        res.write(`<p>Ekkor összesen ${hiányzásokDb} óra hiányzás történt. </p>`);

        // 7. feladat:
        const stat: Map<string, number> = new Map<string, number>();
        hiányzók.forEach(i => {
            if (stat.has(i.Név)) {
                stat.set(i.Név, stat.get(i.Név) + i.HianyzasDb);
            } else {
                stat.set(i.Név, i.HianyzasDb);
            }
        });

        const maxHiányzás: number = Math.max(...stat.values());
        res.write("<p>7.feladat:<br>Alegtöbbet hiányzó tanulók: ");
        stat.forEach((value: number, key: string) => {
            if (value === maxHiányzás) res.write(`${key} `);
        });
        res.write("</p><input type='submit' value='Frissítés'></form>");

        // Nem a feladat része :
        res.write("<p><b>naplo.txt fájl:</b></p>");
        fs.readFileSync("naplo.txt").toString().split("\n").forEach(i => {
            res.write(`${i.trim()}<br>`);
        });
        res.write("</pre");
        res.end();
    }
}